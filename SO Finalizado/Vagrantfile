Vagrant.configure("2") do |config|
  # Configuración común para ambas máquinas
  config.vm.provision "shell", inline: <<-SHELL
    # Crear usuarios con contraseñas seguras y directorios home
    sudo useradd -m -s /bin/bash admin || true
    echo "admin:Admin123#Secure!" | sudo chpasswd
    
    sudo useradd -m -s /bin/bash tester || true
    echo "tester:Test123#Secure!" | sudo chpasswd
    
    sudo useradd -m -s /bin/bash appUser || true
    echo "appUser:App123#Secure!" | sudo chpasswd
    
    # Crear directorios .ssh para cada usuario
    for user in admin tester appUser; do
        sudo mkdir -p /home/$user/.ssh
        sudo chmod 700 /home/$user/.ssh
        sudo chown $user:$user /home/$user/.ssh
    done
    
    # Generar par de claves SSH para cada usuario
    for user in admin tester appUser; do
        sudo -u $user ssh-keygen -t rsa -b 4096 -N "" -f /home/$user/.ssh/id_rsa || true
        sudo cp /home/$user/.ssh/id_rsa.pub /home/$user/.ssh/authorized_keys
        sudo chmod 600 /home/$user/.ssh/authorized_keys
        sudo chown $user:$user /home/$user/.ssh/authorized_keys
    done
    
    # Copiar las claves al directorio compartido para acceso desde el host
    sudo cp /home/admin/.ssh/id_rsa /vagrant/admin_key
    sudo cp /home/admin/.ssh/id_rsa.pub /vagrant/admin_key.pub
    
    # Establecer permisos correctos para las claves
    sudo chmod 600 /vagrant/admin_key
    
    # Dar privilegios sudo solo al usuario admin
    echo "admin ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/admin
    
    # Configurar SSH para evitar verificación de host
    for user in admin tester appUser; do
        echo "StrictHostKeyChecking no" | sudo tee /home/$user/.ssh/config
        sudo chown $user:$user /home/$user/.ssh/config
        sudo chmod 600 /home/$user/.ssh/config
    done
  SHELL
  
  # MÁQUINA 1 - servidorWeb
  config.vm.define :servidorWeb do |servidorWeb|
    servidorWeb.vm.box = "rockylinux/9"
    servidorWeb.vm.network "private_network", ip: "192.168.50.4"
    servidorWeb.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
      vb.cpus = 2
    end
    
    servidorWeb.vm.provision "shell", inline: <<-SHELL
      # Instalar epel-release y Ansible
      sudo dnf install -y epel-release
      sudo dnf install -y ansible-core
      # Configurar Ansible
      sudo mkdir -p /home/vagrant/ansible
      sudo cp /vagrant/playbook.yml /home/vagrant/ansible/
      sudo cp /vagrant/hosts.ini /home/vagrant/ansible/
      # Ejecutar playbook
      cd /home/vagrant/ansible && sudo ansible-playbook -i /vagrant/hosts.ini playbook.yml --limit servidorWeb

      sudo cp /vagrant/web/index.html /usr/share/nginx/html/index.html
      sudo cp /vagrant/web/linuxImage.jpg /usr/share/nginx/html/linuxImage.jpg

          # Instalar wget
      sudo dnf install -y wget
      if ! command -v wget &> /dev/null; then
        echo "Error: wget no se instaló correctamente, usando curl como alternativa." >&2
        sudo dnf install -y curl
        curl -L -o /tmp/nginx-prometheus-exporter_1.3.0_linux_amd64.tar.gz https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v1.3.0/nginx-prometheus-exporter_1.3.0_linux_amd64.tar.gz
      else
        wget -P /tmp https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v1.3.0/nginx-prometheus-exporter_1.3.0_linux_amd64.tar.gz
      fi

      # Descomprimir y ejecutar
      tar -xvzf /tmp/nginx-prometheus-exporter_1.3.0_linux_amd64.tar.gz -C /tmp
      /tmp/nginx-prometheus-exporter -nginx.scrape-uri=http://localhost/nginx_status

    SHELL
  end

  # MÁQUINA 2 - servidorMonitoreo
  config.vm.define :servidorMonitoreo do |servidorMonitoreo|
    servidorMonitoreo.vm.box = "rockylinux/9"
    servidorMonitoreo.vm.network "private_network", ip: "192.168.50.5"
    servidorMonitoreo.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
      vb.cpus = 2
    end

    servidorMonitoreo.vm.provision "shell", inline: <<-SHELL
      # Instalar epel-release y Ansible
      sudo dnf install -y epel-release
      sudo dnf install -y ansible-core
      
      # Configurar Ansible
      sudo mkdir -p /home/vagrant/ansible
      sudo cp /vagrant/playbook.yml /home/vagrant/ansible/
      sudo cp /vagrant/hosts.ini /home/vagrant/ansible/
      
      # Ejecutar playbook
      cd /home/vagrant/ansible && sudo ansible-playbook -i /vagrant/hosts.ini playbook.yml --limit servidorMonitoreo
    SHELL
  end

end